import {
  computed,
  getCurrentScope,
  inject,
  onMounted,
  onScopeDispose,
  ref,
  warn,
  watch
} from "./chunk-FIAHBV72.js";

// node_modules/vue-recaptcha/dist/utils.mjs
function warn2(msg, ...params) {
  warn(`[vue-recaptcha]: ${msg}`, ...params);
}
function invariant(condition, msg) {
  if (!condition) {
    warn2(msg);
    throw new Error(`Invariant violation: ${msg}`);
  }
}

// node_modules/vue-recaptcha/dist/composables/context.mjs
var RecaptchaContextKey = Symbol("vue-recaptcha-context");
function useRecaptchaContext() {
  const context = inject(RecaptchaContextKey);
  if (!context) {
    warn2("You may forget to `use` vue-recaptcha plugin");
    throw new Error("useRecaptcha() is called without provider.");
  }
  return context;
}
function useRecaptchaProxy() {
  const ctx = useRecaptchaContext();
  return ctx.proxy;
}
function useAssertV2SiteKey() {
  const ctx = useRecaptchaContext();
  invariant(ctx.options.v2SiteKey, "Your config is not compatible with recaptcha v2, please provide v2SiteKey");
  return ctx.options.v2SiteKey;
}
function useAssertV3SiteKey() {
  const ctx = useRecaptchaContext();
  invariant(ctx.options.v3SiteKey, "Your config is not compatible with recaptcha v3, please provide v3SiteKey");
  return ctx.options.v3SiteKey;
}
function normalizeOptions(input) {
  invariant(
    input.v2SiteKey || input.v3SiteKey,
    "You didn't pass v2SiteKey or v3SiteKey to plugin, which may be a mistake"
  );
  return {
    ...input,
    params: {
      ...input.params,
      render: input.v3SiteKey ?? "explicit"
    }
  };
}

// node_modules/p-defer/index.js
function pDefer() {
  const deferred = {};
  deferred.promise = new Promise((resolve, reject) => {
    deferred.resolve = resolve;
    deferred.reject = reject;
  });
  return deferred;
}

// node_modules/defu/dist/defu.mjs
function isPlainObject(value) {
  if (value === null || typeof value !== "object") {
    return false;
  }
  const prototype = Object.getPrototypeOf(value);
  if (prototype !== null && prototype !== Object.prototype && Object.getPrototypeOf(prototype) !== null) {
    return false;
  }
  if (Symbol.iterator in value) {
    return false;
  }
  if (Symbol.toStringTag in value) {
    return Object.prototype.toString.call(value) === "[object Module]";
  }
  return true;
}
function _defu(baseObject, defaults, namespace = ".", merger) {
  if (!isPlainObject(defaults)) {
    return _defu(baseObject, {}, namespace, merger);
  }
  const object = Object.assign({}, defaults);
  for (const key in baseObject) {
    if (key === "__proto__" || key === "constructor") {
      continue;
    }
    const value = baseObject[key];
    if (value === null || value === void 0) {
      continue;
    }
    if (merger && merger(object, key, value, namespace)) {
      continue;
    }
    if (Array.isArray(value) && Array.isArray(object[key])) {
      object[key] = [...value, ...object[key]];
    } else if (isPlainObject(value) && isPlainObject(object[key])) {
      object[key] = _defu(
        value,
        object[key],
        (namespace ? `${namespace}.` : "") + key.toString(),
        merger
      );
    } else {
      object[key] = value;
    }
  }
  return object;
}
function createDefu(merger) {
  return (...arguments_) => (
    // eslint-disable-next-line unicorn/no-array-reduce
    arguments_.reduce((p, c) => _defu(p, c, "", merger), {})
  );
}
var defu = createDefu();
var defuFn = createDefu((object, key, currentValue) => {
  if (object[key] !== void 0 && typeof currentValue === "function") {
    object[key] = currentValue(object[key]);
    return true;
  }
});
var defuArrayFn = createDefu((object, key, currentValue) => {
  if (Array.isArray(object[key]) && typeof currentValue === "function") {
    object[key] = currentValue(object[key]);
    return true;
  }
});

// node_modules/vue-recaptcha/dist/script-manager/common.mjs
var recaptchaLoaded = pDefer();
var ONLOAD_KEY = "__vueRecaptchaLoaded";
if (typeof window !== "undefined") {
  window[ONLOAD_KEY] = () => {
    recaptchaLoaded.resolve();
  };
}
function toQueryString(params) {
  return new URLSearchParams(normalizeParams(params)).toString();
}
function normalizeParams(raw) {
  const params = defu(raw, { onload: ONLOAD_KEY, render: "explicit" });
  if (params.render === "onload") {
    warn2("passing `onload` as `render` param is not allowed");
    params.render = "explicit";
  }
  if (params.onload !== ONLOAD_KEY) {
    warn2("passing `onload` param with other value is not allowed");
    params.onload = ONLOAD_KEY;
  }
  return toStringPair(params);
}
function toStringPair(params) {
  return Object.entries(params).filter((pair) => typeof pair[1] === "string");
}
function checkRecaptchaLoad() {
  if (typeof window === "undefined") {
    return false;
  }
  const isLoaded = Object.hasOwn(window, "grecaptcha") && Object.hasOwn(window.grecaptcha, "execute");
  if (isLoaded) {
    recaptchaLoaded.resolve();
  }
  return isLoaded;
}

// node_modules/vue-recaptcha/dist/composables/proxy.mjs
function createRecaptchaProxy(isReady) {
  function assertLoaded() {
    invariant(isReady.value, "ReCAPTCHA is not loaded");
  }
  async function wait() {
    await recaptchaLoaded.promise;
    isReady.value = true;
  }
  return {
    async render(ele, options) {
      await wait();
      return window.grecaptcha.render(ele, options);
    },
    reset(widgetId) {
      if (typeof widgetId === "undefined") {
        return;
      }
      assertLoaded();
      window.grecaptcha.reset(widgetId);
    },
    async execute(widgetId, options) {
      if (typeof widgetId === "undefined") {
        return;
      }
      await wait();
      return window.grecaptcha.execute(widgetId, options);
    }
  };
}

// node_modules/vue-recaptcha/dist/plugin.mjs
function createPlugin(scriptManagerFactory) {
  return {
    install(app, options) {
      const isReady = ref(false);
      async function waitLoaded() {
        await recaptchaLoaded.promise;
        isReady.value = true;
      }
      waitLoaded();
      checkRecaptchaLoad();
      const opt = normalizeOptions(options);
      app.provide(RecaptchaContextKey, {
        isReady,
        scriptInjected: false,
        proxy: createRecaptchaProxy(isReady),
        useScriptProvider: scriptManagerFactory(opt.params),
        options: opt
      });
    }
  };
}

// node_modules/@vueuse/shared/index.mjs
var _a;
var isClient = typeof window !== "undefined";
var isIOS = isClient && ((_a = window == null ? void 0 : window.navigator) == null ? void 0 : _a.userAgent) && /iP(ad|hone|od)/.test(window.navigator.userAgent);
function tryOnScopeDispose(fn) {
  if (getCurrentScope()) {
    onScopeDispose(fn);
    return true;
  }
  return false;
}
function createEventHook() {
  const fns = [];
  const off = (fn) => {
    const index = fns.indexOf(fn);
    if (index !== -1)
      fns.splice(index, 1);
  };
  const on = (fn) => {
    fns.push(fn);
    const offFn = () => off(fn);
    tryOnScopeDispose(offFn);
    return {
      off: offFn
    };
  };
  const trigger = (param) => {
    fns.forEach((fn) => fn(param));
  };
  return {
    on,
    off,
    trigger
  };
}
function resolveRef(r) {
  return typeof r === "function" ? computed(r) : ref(r);
}
function whenever(source, cb, options) {
  return watch(source, (v, ov, onInvalidate) => {
    if (v)
      cb(v, ov, onInvalidate);
  }, options);
}

// node_modules/vue-recaptcha/dist/composables/challenge-v2.mjs
var RecaptchaV2State = ((RecaptchaV2State2) => {
  RecaptchaV2State2["Init"] = "init";
  RecaptchaV2State2["Verified"] = "verified";
  RecaptchaV2State2["Expired"] = "expired";
  RecaptchaV2State2["Error"] = "error";
  return RecaptchaV2State2;
})(RecaptchaV2State || {});
function useChallengeV2({ root = ref(), options = {} }) {
  const siteKey = useAssertV2SiteKey();
  const widgetID = ref();
  const proxy = useRecaptchaProxy();
  const verify = createEventHook();
  const expired = createEventHook();
  const error = createEventHook();
  const rootRef = resolveRef(root);
  const state = ref(
    "init"
    /* Init */
  );
  whenever(rootRef, async (el) => {
    const id = await proxy.render(el, {
      ...options,
      sitekey: siteKey,
      callback: verify.trigger,
      "expired-callback": expired.trigger,
      "error-callback": error.trigger
    });
    widgetID.value = id;
  });
  verify.on(() => {
    state.value = "verified";
  });
  expired.on(() => {
    state.value = "expired";
  });
  error.on(() => {
    state.value = "error";
  });
  return {
    root: rootRef,
    widgetID,
    execute() {
      if (typeof widgetID.value !== "undefined") {
        proxy.execute(widgetID.value);
      }
    },
    reset() {
      state.value = "init";
      if (typeof widgetID.value !== "undefined") {
        proxy.reset(widgetID.value);
      }
    },
    state,
    onVerify: verify.on,
    onExpired: expired.on,
    onError: error.on
  };
}

// node_modules/vue-recaptcha/dist/composables/challenge-v3.mjs
function useChallengeV3(action) {
  const siteKey = useAssertV3SiteKey();
  const proxy = useRecaptchaProxy();
  const response = ref();
  return {
    response,
    async execute() {
      return response.value = await proxy.execute(siteKey, { action });
    }
  };
}

// node_modules/vue-recaptcha/dist/composables/script-provider.mjs
function useRecaptchaProvider() {
  const ctx = useRecaptchaContext();
  if (ctx.scriptInjected) {
    warn2("`useRecaptchaProvider` is used multiple time");
  } else {
    ctx.scriptInjected = true;
    ctx.useScriptProvider();
    onMounted(() => {
      checkRecaptchaLoad();
    });
  }
}

// node_modules/vue-recaptcha/dist/api.mjs
import { default as default2 } from "E:/XAMPP/htdocs/leopando/client/node_modules/vue-recaptcha/dist/components/ChallengeV2.vue";
import { default as default3 } from "E:/XAMPP/htdocs/leopando/client/node_modules/vue-recaptcha/dist/components/ChallengeV3.vue";
import { default as default4 } from "E:/XAMPP/htdocs/leopando/client/node_modules/vue-recaptcha/dist/components/Checkbox.vue";

export {
  useRecaptchaContext,
  useRecaptchaProxy,
  toQueryString,
  createPlugin,
  RecaptchaV2State,
  useChallengeV2,
  useChallengeV3,
  useRecaptchaProvider,
  default2 as default,
  default3 as default2,
  default4 as default3
};
//# sourceMappingURL=chunk-IK2ET5KH.js.map
